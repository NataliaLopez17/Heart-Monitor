
; Author: JosÃ© Navarro
; March 20, 2020

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module

        ORG     0FFE8h                  ; vector for TIMER_A0
        DC16    MainLoop                ; set vector for 'MainLoop' routine
        
        ORG     0FFDAh                  ; vector for PORT1
        //DC16    PORT1_ISR               ; set vector for 'PORT1_ISR' routine
        
        ORG     0FFFEh                  ; vector for RESET
        DC16    init                    ; set reset vector to 'init' label

        ORG     01C00h
//intsCounter     DW 0                    ; TIMER_A0 interrupts counter

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

;------------------------------ALPHABET------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;                               A       B       C       D       E       F       G       H       I       J       K       L       M       N       O       P       Q           R       S       T       U       V       W       X       Y       Z
highBytesAlpha          db      0xEF,   0xF1,   0x9C,   0xF0,   0x9F,   0x8F,   0xBD,   0x6F,   0x90,   0x70,   0x0E,   0x1C,   0xEC,   0x6C,   0xFC,   0xCF,    0xFC,      0xC1,   0xB7,   0x80,   0x7C,   0x7C,   0x7C,   0x00,   0x00,   0x90
lowBytesAlpha           db      0,      0x50,   0,      0x50,   0,      0,      0,      0,      0x50,   0,      0x22,      0,   0x40,   0x82,   0,      0,       0x82,      0x52,   0,      0x50,   0,      0,      0x10,   0xAA,   0xB0,   0x28
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


init:   MOV     #SFE(CSTACK), SP        ; set up stack


main:   NOP                         	; main program
    	MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

LCD_Setup:
    	;Enable LCD segments 0 - 21; 26 - 43
    	mov.w   #0xffff, &LCDCPCTL0
    	mov.w   #0xfc3f, &LCDCPCTL1
    	mov.w   #0x0fff, &LCDCPCTL2

    	bis.w   #1,&LCDCCTL0
    	mov.w   #0x041e, &LCDCCTL0      ;Initialize LCD_C
    	mov.w   #0x0208, &LCDCVCTL      ;VLCD generated internally
    	mov.w   #0x8000, &LCDCCPCTL     ;Clock synchronization enabled 
    	mov.w   #2,&LCDCMEMCTL          ;Clear LCD memory
    	bis.w   #1,&LCDCCTL0            ;Turn LCD on



button_setup:
    	bic.b   #0xFF,&P1SEL0       	; Set PxSel0 and PxSel1 to digital I/O
    	bic.b   #0xFF,&P1SEL1       	; Digital I/O is the default
    	bic.b   #0xFF,&P9SEL0
    	bic.b   #0xFF,&P9SEL1
   	 
    	mov.b   #11111001B,&P1DIR   	; Set P1.1 and P1.2 for input and all
                                    	; other P1 pins for output

    	bis.b   #0xFF,&P9DIR        	; Set all P9 pins for output

    	mov.b   #00000110B,&P1REN    	; Activate P1.1 and P1.2 programable
                                    	; pull-up/pull-down resistors
    	bis.b   #00000110B,&P1OUT   	; Set resistors for P1.1 and P1.2 as
                                    	; as pull-up
    	bic.b   #0x01,&P1OUT        	; Clear P1.0 and P9.7 output latch to
    	bic.b   #0x80,&P9OUT        	; start with both off

UnlockGPIO:
        bic.w   #LOCKLPM5,&PM5CTL0      ; Disable the GPIO power-on default
                                        ; high-impedance mode to activate
                                        ; previously configured port settings

        mov     #CCIE, &TA0CCTL0        ; Enable TACCR0 interrupt

        mov     #TASSEL_2+MC_1+ID_3, &TA0CTL  ;Set timer according to next table
	nop
        ; Uses SMCLK and up mode
        ; TASSELx        MCx (mode control)                IDx (input divider)
        ; 00 -> TACLK    00 -> Stop                        00 -> /1
        ; 01 -> ACLK     01 -> Up mode (up to TACCR0)      01 -> /2
        ; 10 -> SMCLK    10 -> Continuous (up to 0FFFFh)   02 -> /4
        ; 11 -> INCLK    11 -> Up/down (top on TACCR0)     03 -> /8

        ; period = cycles * divider / SMLCK
        ; Assuming SMLCK = 1 MHz, divider = 8 and period = 0.5 seg
        ; cycles = 62500.  With period = 0.5 LED turn on every 1 second
        mov     #62500, &TA0CCR0        ; Set the timer capture compare register 0

        bic.b   #0000010b, &P1IFG       ; To erase a flag raised before
               	                        ; activating the GIE. This help to
                                        ; avoid responding to a push on button
                                        ; previous to program start.

	nop				; required befor enabling interrupts

        bis     #GIE+LPM0, SR           ; Enable interrupts and enter Low Power mode 0
                                        ; that doesn't disable timers
        nop                             ; Required after enabling interrupts

        JMP $                           ; jump to current location '$'
        NOP    

MainLoop:
        clr     R5
        
        mov.b   #0xFC,  &0xA29
        mov.b   #0,  &0xA2A
        
        mov.b   #0xCF,  &0xA25
        mov.b   #0,  &0xA26
        
        mov.b   #0x80,  &0xA23
        mov.b   #0x50,  &0xA24
        
        mov.b   #0x90,  &0xA32
        mov.b   #0x50,  &0xA33
        
        mov.b   #0xFC,  &0xA2E
        mov.b   #0,  &0xA2F
        
        mov.b   #0x6C,  &0xA27
        mov.b   #0x82,  &0xA28
        
        call    #ifRightButtonPressed
        jmp     fin
  
ifRightButtonPressed:
        mov.b   &P1IN,R5            	; Copy into R5 P1IN's byte
    	and.b   #00000110B,R5           ; Making sure the button has been pressed so it goes to ground

        cmp.b   #00000010B,R5           ;right button is pressed
        jz      writeREAD        


writeREAD:
        mov.b   #0xC1,  &0xA29
        mov.b   #0,  &0xA2A
        
        mov.b   #0x9F,  &0xA25
        mov.b   #0,  &0xA26
        
        mov.b   #0xEF,  &0xA23
        mov.b   #0x0,  &0xA24
        
        mov.b   #0xF0,  &0xA32
        mov.b   #0x50,  &0xA33
        
        reti
fin:    
      reti
      
      END
