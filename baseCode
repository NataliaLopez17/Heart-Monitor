; Interrupt Management Demostration
; Uses Timer_A0 to generate an interrupt every 0.5 seconds.  With this 
; interrupt green LED status is toggle so that it will light on every 1 second.
; Button S1 generates an interrupt used to toggle CCIE in TA0CCTL0.  With this
; the interrupt generation from Timer_A0 can be enable and disable.
;
; Author: JosÃ© Navarro
; March 20, 2020
#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module

        ORG     0FFE8h                  ; vector for TIMER_A0
        DC16    TIMER_A0_ISR            ; set vector for 'TIMER_A0_ISR' routine
        
        ORG     0FFDAh                  ; vector for PORT1
        DC16    PORT1_ISR               ; set vector for 'PORT1_ISR' routine
        
        ORG     0FFFEh                  ; vector for RESET
        DC16    init                    ; set reset vector to 'init' label

        ORG     01C00h
intsCounter     DW 0                    ; TIMER_A0 interrupts counter

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

        mov     #0, intsCounter         ; Clear intsCounter
        bis.b   #0FDh, &P1DIR           ; Port 1.1 for button input, all other as output
        bis.b   #0FFh, &P2DIR           ; All Port 2 pins as output
	bis.b   #0FFh, &P9DIR           ; All Port 9 pins as output
        bis.b   #00000001b, &P1OUT      ; Turn on red LED
        bic.b 	#0x80, P9OUT		; Turn off green LED

	bis.b   #02h, &P1OUT		; P1.1 Resistor enabled as pullup
        bis.b   #02h, &P1REN            ; resistor. Push is read as 0 and else 1

        bis.b   #02h, &P1IES            ; Int generated on high to low transition
        bis.b   #02h, &P1IE             ; Enable interrupt at P1.1

UnlockGPIO:
        bic.w   #LOCKLPM5,&PM5CTL0      ; Disable the GPIO power-on default
                                        ; high-impedance mode to activate
                                        ; previously configured port settings

        mov     #CCIE, &TA0CCTL0        ; Enable TACCR0 interrupt

        mov     #TASSEL_2+MC_1+ID_3, &TA0CTL  ;Set timer according to next table
	nop
        ; Uses SMCLK and up mode
        ; TASSELx        MCx (mode control)                IDx (input divider)
        ; 00 -> TACLK    00 -> Stop                        00 -> /1
        ; 01 -> ACLK     01 -> Up mode (up to TACCR0)      01 -> /2
        ; 10 -> SMCLK    10 -> Continuous (up to 0FFFFh)   02 -> /4
        ; 11 -> INCLK    11 -> Up/down (top on TACCR0)     03 -> /8

        ; period = cycles * divider / SMLCK
        ; Assuming SMLCK = 1 MHz, divider = 8 and period = 0.5 seg
        ; cycles = 62500.  With period = 0.5 LED turn on every 1 second
        mov     #62500, &TA0CCR0        ; Set the timer capture compare register 0

        bic.b   #0000010b, &P1IFG       ; To erase a flag raised before
               	                        ; activating the GIE. This help to
                                        ; avoid responding to a push on button
                                        ; previous to program start.

	nop				; required befor enabling interrupts

        bis     #GIE+LPM0, SR           ; Enable interrupts and enter Low Power mode 0
                                        ; that doesn't disable timers
        nop                             ; Required after enabling interrupts

        JMP $                           ; jump to current location '$'
        NOP                             ; (endless loop)

TIMER_A0_ISR:

        xor.b #BIT7, P9OUT              ; just to toggle green LED each time the
                                        ; ISR is executed
        cmp #9, intsCounter             ; To toggle red LED each time the 
                                        ; interrupt counter reaches 10
        jnz noToggle
        xor.b #BIT0, P1OUT              ; Toggle red LED
                                        ; CCIFG automatically reset when entering
              	                        ; the ISR so no need to clear the flag
        mov #0, intsCounter
        jmp fin
noToggle:
        inc intsCounter
fin:
        reti

PORT1_ISR:
	bic.b   #00000010b, &P1IFG	;Reset interrupt flag
        nop
	xor 	#CCIE, &TA0CCTL0
	nop
	xor.b  	#0x80,&P9OUT	        ;Toggle green LED

	reti

        END
